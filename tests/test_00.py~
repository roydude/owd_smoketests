import sys
sys.path.insert(1, "./")

from tools import TestUtils
from apps import DOM, app_contacts, app_settings
from tests.mock_data.contacts import MockContacts
from gaiatest import GaiaTestCase

class test_41(GaiaTestCase):
    _Description = "Importing facebook contacts."

    def setUp(self):
        #
        # Set up child objects...
        #
        GaiaTestCase.setUp(self)
        self.UTILS      = TestUtils(self, 41)
        self.contacts   = app_contacts.main(self, self.UTILS)
        self.settings   = app_settings.main(self, self.UTILS)
                
        #
        # Set timeout for element searches.
        #
        self.marionette.set_search_timeout(50)
        self.lockscreen.unlock()

        #
        # Get details of our test contacts.
        #
        self.Contact_1 = MockContacts().Contact_1
        
        #
        # Set up to use data connection.
        #
        self.UTILS.reportError("roy")
        #self.data_layer.disable_wifi()
        #self.settings.turn_dataConn_on(False)
        
        #
        # You must be logged into facebook already to run this test
        # (cannot automated this because it requires a 'captcha').
        # So prompt for it before starting.
        #
        ignoreme = self.UTILS.get_os_variable("ENTER", "For test 41 please ensure you are logged into facebook on the device, then press")
        
    def tearDown(self):
        self.UTILS.reportResults()
        
    def test_run(self):
        #
        # Launch contacts app.
        #
        self.UTILS.reportError("roy")
        self.data_layer.insert_contact(self.Contact_1)
        self.contacts.launch()
        
        #
        # Create new contact.
        #
        self.UTILS.reportError("roy")
        #self.contacts.createNewContact(self.Contact_1)

        #
        # View the contact details.
        #
        self.contacts.viewContact(self.Contact_1)
        
        #
        # Press the link button.
        #
        self.contacts.pressLinkContact()

        #
        # Need to figure out a better way to do this.
        #
        import time
        
        self.UTILS.screenShot("ISTHISIT")
        
        self.UTILS.savePageHTML("/tmp/roy1.html")
        
        x = self.marionette.find_elements("xpath", "//*[@id='friends-list']//li")
        
        for i in x:
            self.UTILS.reportError("LISTING")
            if i.is_displayed():
                #
                # Keep the name and email detais for this contact.
                #
                y = i.find_elements("tag name", "p")
                fb_name  = y[0].text
                fb_email = y[1].text
                
                self.marionette.tap(i)
                break

        self.UTILS.reportComment("Linked FB contact: " + fb_name + " (" + fb_email + ").")
        
        #
        # Switch back and wait for contact details page to re-appear.
        #
        self.UTILS.switchToFrame(*DOM.Contacts.frame_locator)
##        x = self.UTILS.get_element("xpath", DOM.GLOBAL.app_head_specific % self.Contact_1['name'])
        
        time.sleep(2)
        self.UTILS.savePageHTML("/tmp/roy1.html")