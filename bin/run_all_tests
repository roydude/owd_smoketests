#!/bin/bash

mkdir /tmp/tests 2>/dev/null

export RESULT_DIR="/tmp/tests/B2G_tests.$(date +%Y%m%d%H%M%S)"
export RUNTEST="./bin/run_test_case"
export TESTDIR="./tests"

[ ! -d "$RESULT_DIR" ] && mkdir -p $RESULT_DIR


################################################################################
#
# FUNCTIONS
#

#
# Function to pad a number with 0's ...
#
f_pad(){
    # Make sure the number is 2 digits (pad with 0).
    echo $1 | awk '{printf("%02d", $1)}'
}

#
# Function to run a test case ...
#
run_test(){
    export TEST_FILE=$1
    export TEST_NUM=$(echo ${TEST_FILE%.py} | sed -e "s/^.*_//")

    TEST_DESC=$(grep "_Description" $TEST_FILE | head -1 | sed -e "s/^[^\"]*\"\(.*\)\"/\1/")
    export TEST_DESC=${TEST_DESC:-"(no description found!)"}

    $RUNTEST 
}

#
# Function to ensure a pre-requisite installs before proceeding.
#
runSetup(){
    #
    # Run whatever script is passed in.
    #
    $1

    #
    # Check if it exited correctly.
    #
    if [ $? -ne 0 ]
    then
        printf "\nProblem setting up pre-requisites - please investigate!\n\n"
        exit 1
    fi
}


################################################################################
#
# INITIAL SETUP OF DEPENDENCIES
#

#
# If gaiatest is not detected, then take this as a sign that this is the first run since
# the repo was cloned from Git. Install 'everything' + make necessary tweaks.
#
if [ ! -d "./gaia-ui-tests" ]
then
    #
    # Setup pre-requisites.
    #
    runSetup ./bin/setup_python27

    runSetup ./bin/setup_adb

    #
    # Remove any previous version of marionette
    # (not using variables just to be sure!).
    #
    sudo rm -rf /usr/local/lib/python2.7/dist-packages/marionette* 2> /dev/null
    sudo rm /usr/local/bin/marionette 2> /dev/null

    #
    # Setup gaiatest and Marionette.
    #
    runSetup ./bin/setup_gaiatest
fi


#
# Did the caller just want to run certain tests?
#
TESTS="$@"
if [ ! "$TESTS" ]
then
    #
    # No specific tests requested, so default to all tests.
    #
    while read line
    do
        TESTS="$TESTS $line"
    done <<EOF
    $(ls ./tests/test_[0-9][0-9].py | grep -v "test_00" | sed -e "s/^.*test_//" | sed -e "s/\..*//")
EOF
fi


################################################################################
#
# SET UP REQUIRED VARIABLES
#

#
# Load default environment variables if available in $PARAM_FILE.
# (If $PARAM_FILE deosn't exist then rebuild it.)
#
PARAM_FILE="./tests_parameters/parameters"
[ ! -f "$PARAM_FILE" ] && ./bin/rebuild_tests_parameters_file
. $PARAM_FILE

for i in $(echo $TESTS)
do
    x=$(f_pad $i)
    while read line
    do
        # If it's commented out ignore it.
        ISCOMMENTED=$(echo $line | awk '{print $1}' | egrep "^#")
        [ "$ISCOMMENTED" ] && continue

        VARNAM=$(echo $line | sed -e "s/^.*(\"//" | sed -e "s/\".*//")
        VARSTR=$(echo $line | sed -e "s/^.*, *\"//" | sed -e "s/\".*//")

        #
        # Ignore this 'variable' - just using it to prompt.
        #
        if [ "$VARNAM" = "ENTER" ]
        then
            continue
        fi

        #
        # Make sure it's not already set.
        #
        env_set=$(eval echo $`echo $VARNAM`)
        if [ ! "$env_set" ]
        then
            QUESTION=("${QUESTION[@]}" "$VARSTR")
            VARIABLE=("${VARIABLE[@]}" "$VARNAM")
        fi

    done << EOF
    $(grep -i ".get_os_variable" tests/test_${x}.py )
EOF
done

for ((i=0; i<=${#QUESTION[@]}; ++i))
do
    if [ "${QUESTION[$i]}" ]
    then
        if [ ! "$gotParams" ]
        then
            gotParams="Y"
            printf "\nSome of the tests you have chosen require input ...\n\n"
        fi

        Q="${QUESTION[$i]}"
        V="${VARIABLE[$i]}"

        ans=""
        while [ ! "$ans" ]
        do
            printf "$Q [$V]: "
            read ans
        done

        eval export $V="$ans"

    fi
done 


################################################################################
#
# NOW RUN THE TESTS ...
#
[ "$gotParams" ] && printf "\n\n"


#
# Establsh connection to device.
#
./bin/connect_device

if [ $? -ne 0 ]
then
    # There was a problem connecting the device - just quit.
    exit 1
fi


printf "\n\n(For test run details, see '*_detail' files in \"${RESULT_DIR}\".)\n\n"

#
# Now run tests as required.
#
PASS=0
TOTAL=0
for i in $(echo $TESTS)
do
    x=$(f_pad $i)
    results=$(run_test ./tests/test_${x}.py)

    echo "$results"

    #
    # Get the totals.
    #
    result=$(echo "$results"| sed -e "s/^.*\(([0-9]*\/[0-9]*)\).*$/\1/")
    passed=$(echo "$result" | sed -e "s/(\([0-9]*\)\/\([0-9]*\)).*$/\1/")
    total=$( echo "$result" | sed -e "s/(\([0-9]*\)\/\([0-9]*\)).*$/\2/")

    passed=${passed:-0}
    total=${total:-0}

    PASSED=$(($PASSED+$passed))
    TOTAL=$(($TOTAL+$total))
done

printf "\nPassed $PASSED/$TOTAL tests.\n"

printf "\nDONE.\n\n"
