#!/bin/bash

mkdir /tmp/tests 2>/dev/null

export RESULT_FILE="/tmp/tests/B2G_tests.$(date +%Y%m%d%H%M%S)"
export RUNTEST="./bin/run_test_case"
export TESTDIR="./tests"

#
# Load default environment variables (if possible).
#
PARAM_FILE="./tests_parameters/parameters"
if [ -f "$PARAM_FILE" ]
then
	. ./tests_parameters/parameters
else
	#
	# The file's not there, so rebuild it.
	#
	./bin/rebuild_tests_parameters_file
fi

#
# Did the caller just want to run certain tests:
#
TESTS="$@"

# Default to all tests.
if [ ! "$TESTS" ]
then
	while read line
	do
		TESTS="$TESTS $line"
	done <<EOF
	$(ls ./tests/test_[0-9][0-9].py | grep -v "test_00" | sed -e "s/^.*test_//" | sed -e "s/\..*//")
EOF
fi


# Pad the number with 0's ...
f_pad(){
        # Make sure the number is 2 digits (pad with 0).
        echo $1 | awk '{printf("%02d", $1)}'
}

# Run the test as required ...
run_test(){
    FNAM=$1
    DESC=$(grep "_Description" $FNAM | head -1 | sed -e "s/^[^\"]*\"\(.*\)\"/\1/")
    DESC=${DESC:-"(no description found!)"}
    CASE=$(echo ${FNAM%.py} | sed -e "s/^.*_//")
    
    $RUNTEST -t $CASE -d "$DESC" -f $FNAM -r $RESULT_FILE -e ${RESULT_FILE}.err
}



#
# Some required input first ...
#
printf "\n**************************\n\n"

for i in $(echo $TESTS)
do
	x=$(f_pad $i)
	while read line
	do
		# If it's commented out ignore it.
		ISCOMMENTED=$(echo $line | awk '{print $1}' | egrep "^#")
		[ "$ISCOMMENTED" ] && continue

		VARNAM=$(echo $line | sed -e "s/^.*(\"//" | sed -e "s/\".*//")
		VARSTR=$(echo $line | sed -e "s/^.*, *\"//" | sed -e "s/\".*//")

		#
		# Ignore this 'variable' - just using it to prompt.
		#
		if [ "$VARNAM" = "ENTER" ]
		then
			continue
		fi

		#
		# Make sure it's not already set.
		#
		env_set=$(eval echo $`echo $VARNAM`)
		if [ ! "$env_set" ]
		then
			QUESTION=("${QUESTION[@]}" "$VARSTR")
			VARIABLE=("${VARIABLE[@]}" "$VARNAM")
		fi

	done << EOF
	$(grep -i ".get_os_variable" tests/test_${x}.py )
EOF
done

for ((i=0; i<=${#QUESTION[@]}; ++i))
do
	if [ "${QUESTION[$i]}" ]
	then
		if [ ! "$gotParams" ]
		then
			gotParams="Y"
			printf "\nSome of the tests you have chosen require input ...\n\n"
		fi

		Q="${QUESTION[$i]}"
		V="${VARIABLE[$i]}"

		ans=""
		while [ ! "$ans" ]
		do
			printf "$Q [$V]: "
			read ans
		done

		eval export $V="$ans"

	fi
done 

[ "$gotParams" ] && printf "\n\n"


#
# If gaiatest is not detected, then install 'everything' + make necessary tweaks.
#
runSetup(){
	#
	# Run whatever script is passed in.
	#
	$1

	#
	# Check if it exitied correctly.
	#
	if [ $? -ne 0 ]
	then
		printf "\nProblem setting up pre-requisites - please investigate!\n\n"
		exit 1
	fi
}
if [ ! -d "./gaia-ui-tests" ]
then
	#
	# Setup pre-requisites.
	#
	runSetup ./bin/setup_python27

	runSetup ./bin/setup_adb

	#
	# Remove any previous version of marionette
	# (not using variables just to be sure!).
	#
	sudo rm -rf /usr/local/lib/python2.7/dist-packages/marionette* 2> /dev/null
	sudo rm /usr/local/bin/marionette 2> /dev/null

	#
	# Setup gaiatest and Marionette.
	#
	runSetup ./bin/setup_gaiatest
fi

#
# Establsh connection to device.
#
./bin/connect_device

if [ $? -ne 0 ]
then
	# There was a problem connecting the device - just quit.
	exit 1
fi

#
# Now run tests as required.
#
if [ ! "$TESTS" ]
then
    ls ./tests/test_*.py | while read fnam
    do
        run_test $fnam
    done
else
    file_list=""
    
    for i in $(echo $TESTS)
    do
	x=$(f_pad $i)
        
        run_test ./tests/test_${x}.py
    done
fi


clear
printf "\n\n"
echo "*******************************************************"
printf "\n             RESULT SUMMARY: \n\n"
echo "*******************************************************"
cat $RESULT_FILE
printf "\n*******************************************************\n\n"
printf "(These results are stored in $RESULT_FILE.)\n\n"
